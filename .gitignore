# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# PyCharm
.idea/

# MacOS
.DS_Store

# AWS CDK
cdk.out/
package-lock.json

Thanks for reaching out to AWS Premium Support. My name is Rushvanth and I will be working on this case with you today.

I understand that you would like to track "AssumeRoleWithSAML" logins using CloudWatch event rule, but the rule is not getting triggered.

I have verified via our internal team that "AssumeRoleWithSAML" is not currently supported by CloudWatch Events. There is an existing feature request to add this functionality and I've added a +1 vote on your behalf for this to be supported. I have no indication, however, on when or if this feature might get implemented. You can check and monitor the 'What's New with AWS' site (Reference [1]) and the AWS News Blog (Reference [2]) to track new feature announcements; perhaps you'd like to subscribe to those pages to receive regular notifications of new features.

I am sorry for the inconvenience experienced here. However, we have a work-around you may find useful. This work-around utilizes four services:
•	CloudWatch log stream
•	CloudTrail
•	Lambda function to invoke an SNS topic
•	SNS topic

To implement this, a CloudTrail needs to be created if there isn't an existing one that is capturing the event “AssumeRoleWithSAML”. Once CloudTrail has been created, add a CloudWatch log group (this is done by configuring the CloudTrail). There is some useful documentation for this in Reference [3] using the “Configuring CloudWatch Logs Monitoring with the Console” section.

Next, go to the CloudWatch console and in the logs section you’ll find the Log group that is created by the CloudTrail. Click into it to ensure that API calls are being received (note that this can take a few minutes). Ensure that the event “AssumeRoleWithSAML” is being captured by filtering ( {$.eventName = “AssumeRoleWithSAML”} - please include curly brackets in the search filter). Once verified, we’ll need to create a Lambda function to invoke an SNS topic.

I have attached a Lambda function for your use case. Please go to the Lambda dashboard and create a new Function:
•	Fill in the details
•	Ensure that Runtime is in Python 3.6
•	Define a role that will be executing the Lambda function – make sure the role selected has appropriate permissions to publish to an SNS topic - Reference [4]
•	The trigger is CloudWatch Log
•	Configure the trigger to the appropriate log group created earlier
•	Filter pattern is {$.eventName = “AssumeRoleWithSAML”}
•	Code for the Lambda function is attached to this case. When pasting the content into your Lambda function, please substitute your desired SNS topic arn to be used in the code.

Finally, you'll need to subscribe to the Lambda function just created. Click on the CloudWatch logs and in “Actions” select “Stream to AWS Lambda”. Select the Lambda function just created and test.

This is a potential work around that we have tested internally and I hope it proves to be a useful guide for you. If you have additional questions on this subject, feel free to update the case with additional details; we're happy to help.
